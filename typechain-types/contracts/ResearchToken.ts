/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ResearchToken {
  export type ResearchProposalStruct = {
    hypothesisId: string;
    researcher: AddressLike;
    fundingGoal: BigNumberish;
    currentFunding: BigNumberish;
    deadline: BigNumberish;
    funded: boolean;
    completed: boolean;
    resultsHash: string;
    createdAt: BigNumberish;
  };

  export type ResearchProposalStructOutput = [
    hypothesisId: string,
    researcher: string,
    fundingGoal: bigint,
    currentFunding: bigint,
    deadline: bigint,
    funded: boolean,
    completed: boolean,
    resultsHash: string,
    createdAt: bigint
  ] & {
    hypothesisId: string;
    researcher: string;
    fundingGoal: bigint;
    currentFunding: bigint;
    deadline: bigint;
    funded: boolean;
    completed: boolean;
    resultsHash: string;
    createdAt: bigint;
  };
}

export interface ResearchTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_DURATION"
      | "MAX_FUNDING_GOAL"
      | "MIN_DURATION"
      | "MIN_FUNDING_GOAL"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "completeResearch"
      | "createProposal"
      | "decimals"
      | "fundProposal"
      | "getFundingProgress"
      | "getProposal"
      | "getProposals"
      | "isProposalActive"
      | "mint"
      | "name"
      | "owner"
      | "proposalCount"
      | "proposals"
      | "renounceOwnership"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "FundingGoalReached"
      | "OwnershipTransferred"
      | "ProposalCreated"
      | "ProposalFunded"
      | "ProposalRefunded"
      | "ResearchCompleted"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FUNDING_GOAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_FUNDING_GOAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "completeResearch",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundProposal",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingProgress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposals",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isProposalActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FUNDING_GOAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_FUNDING_GOAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeResearch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProposalActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundingGoalReachedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    totalFunding: BigNumberish
  ];
  export type OutputTuple = [proposalId: bigint, totalFunding: bigint];
  export interface OutputObject {
    proposalId: bigint;
    totalFunding: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    hypothesisId: string,
    researcher: AddressLike,
    fundingGoal: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    hypothesisId: string,
    researcher: string,
    fundingGoal: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    hypothesisId: string;
    researcher: string;
    fundingGoal: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalFundedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    funder: AddressLike,
    amount: BigNumberish,
    currentFunding: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    funder: string,
    amount: bigint,
    currentFunding: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    funder: string;
    amount: bigint;
    currentFunding: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalRefundedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    funder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    funder: string,
    amount: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    funder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResearchCompletedEvent {
  export type InputTuple = [proposalId: BigNumberish, resultsHash: string];
  export type OutputTuple = [proposalId: bigint, resultsHash: string];
  export interface OutputObject {
    proposalId: bigint;
    resultsHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ResearchToken extends BaseContract {
  connect(runner?: ContractRunner | null): ResearchToken;
  waitForDeployment(): Promise<this>;

  interface: ResearchTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_DURATION: TypedContractMethod<[], [bigint], "view">;

  MAX_FUNDING_GOAL: TypedContractMethod<[], [bigint], "view">;

  MIN_DURATION: TypedContractMethod<[], [bigint], "view">;

  MIN_FUNDING_GOAL: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  completeResearch: TypedContractMethod<
    [proposalId: BigNumberish, resultsHash: string],
    [void],
    "nonpayable"
  >;

  createProposal: TypedContractMethod<
    [hypothesisId: string, fundingGoal: BigNumberish, duration: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  fundProposal: TypedContractMethod<
    [proposalId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFundingProgress: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint],
    "view"
  >;

  getProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [ResearchToken.ResearchProposalStructOutput],
    "view"
  >;

  getProposals: TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [ResearchToken.ResearchProposalStructOutput[]],
    "view"
  >;

  isProposalActive: TypedContractMethod<
    [proposalId: BigNumberish],
    [boolean],
    "view"
  >;

  mint: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string,
        bigint
      ] & {
        hypothesisId: string;
        researcher: string;
        fundingGoal: bigint;
        currentFunding: bigint;
        deadline: bigint;
        funded: boolean;
        completed: boolean;
        resultsHash: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_FUNDING_GOAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_FUNDING_GOAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeResearch"
  ): TypedContractMethod<
    [proposalId: BigNumberish, resultsHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [hypothesisId: string, fundingGoal: BigNumberish, duration: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fundProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getFundingProgress"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [ResearchToken.ResearchProposalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposals"
  ): TypedContractMethod<
    [offset: BigNumberish, limit: BigNumberish],
    [ResearchToken.ResearchProposalStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isProposalActive"
  ): TypedContractMethod<[proposalId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        string,
        bigint
      ] & {
        hypothesisId: string;
        researcher: string;
        fundingGoal: bigint;
        currentFunding: bigint;
        deadline: bigint;
        funded: boolean;
        completed: boolean;
        resultsHash: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "FundingGoalReached"
  ): TypedContractEvent<
    FundingGoalReachedEvent.InputTuple,
    FundingGoalReachedEvent.OutputTuple,
    FundingGoalReachedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalFunded"
  ): TypedContractEvent<
    ProposalFundedEvent.InputTuple,
    ProposalFundedEvent.OutputTuple,
    ProposalFundedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalRefunded"
  ): TypedContractEvent<
    ProposalRefundedEvent.InputTuple,
    ProposalRefundedEvent.OutputTuple,
    ProposalRefundedEvent.OutputObject
  >;
  getEvent(
    key: "ResearchCompleted"
  ): TypedContractEvent<
    ResearchCompletedEvent.InputTuple,
    ResearchCompletedEvent.OutputTuple,
    ResearchCompletedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "FundingGoalReached(uint256,uint256)": TypedContractEvent<
      FundingGoalReachedEvent.InputTuple,
      FundingGoalReachedEvent.OutputTuple,
      FundingGoalReachedEvent.OutputObject
    >;
    FundingGoalReached: TypedContractEvent<
      FundingGoalReachedEvent.InputTuple,
      FundingGoalReachedEvent.OutputTuple,
      FundingGoalReachedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProposalCreated(uint256,string,address,uint256,uint256)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalFunded(uint256,address,uint256,uint256)": TypedContractEvent<
      ProposalFundedEvent.InputTuple,
      ProposalFundedEvent.OutputTuple,
      ProposalFundedEvent.OutputObject
    >;
    ProposalFunded: TypedContractEvent<
      ProposalFundedEvent.InputTuple,
      ProposalFundedEvent.OutputTuple,
      ProposalFundedEvent.OutputObject
    >;

    "ProposalRefunded(uint256,address,uint256)": TypedContractEvent<
      ProposalRefundedEvent.InputTuple,
      ProposalRefundedEvent.OutputTuple,
      ProposalRefundedEvent.OutputObject
    >;
    ProposalRefunded: TypedContractEvent<
      ProposalRefundedEvent.InputTuple,
      ProposalRefundedEvent.OutputTuple,
      ProposalRefundedEvent.OutputObject
    >;

    "ResearchCompleted(uint256,string)": TypedContractEvent<
      ResearchCompletedEvent.InputTuple,
      ResearchCompletedEvent.OutputTuple,
      ResearchCompletedEvent.OutputObject
    >;
    ResearchCompleted: TypedContractEvent<
      ResearchCompletedEvent.InputTuple,
      ResearchCompletedEvent.OutputTuple,
      ResearchCompletedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
